<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>「捯饬记录」配置一下Padavan的IPV6动态域名解析</title>
    <link href="/2020/01/13/%E3%80%8C%E6%8D%AF%E9%A5%AC%E8%AE%B0%E5%BD%95%E3%80%8D%E9%85%8D%E7%BD%AE%E4%B8%80%E4%B8%8BPadavan%E7%9A%84IPV6%E5%8A%A8%E6%80%81%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/"/>
    <url>/2020/01/13/%E3%80%8C%E6%8D%AF%E9%A5%AC%E8%AE%B0%E5%BD%95%E3%80%8D%E9%85%8D%E7%BD%AE%E4%B8%80%E4%B8%8BPadavan%E7%9A%84IPV6%E5%8A%A8%E6%80%81%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="记录时间：2020-年-1-月-8-日"><a href="#记录时间：2020-年-1-月-8-日" class="headerlink" title="记录时间：2020 年 1 月 8 日"></a>记录时间：2020 年 1 月 8 日</h1><h2 id="关键词：Padavan-IPV6-DDNS-邮件-脚本-stateless"><a href="#关键词：Padavan-IPV6-DDNS-邮件-脚本-stateless" class="headerlink" title="关键词：Padavan IPV6 DDNS 邮件 脚本 stateless"></a>关键词：Padavan IPV6 DDNS 邮件 脚本 stateless</h2><h2 id="START"><a href="#START" class="headerlink" title="START"></a>START</h2><p>想要体验一下拥有公网 IPV6 的便捷，无奈家庭宽带的 IP 都是动态分配的，为了方便使用只好找个 DDNS，本文采用的是 <a href="https://dynv6.com/" target="_blank" rel="noopener">dynv6</a> 提供的免费 DDNS 和二级域名。顺便说一下，Padavan 内置的 DDNS 貌似无法使用，那就只好用脚本来解决了。</p><h2 id="使用脚本配置-DDNS"><a href="#使用脚本配置-DDNS" class="headerlink" title="使用脚本配置 DDNS"></a>使用脚本配置 DDNS</h2><h3 id="使用前提"><a href="#使用前提" class="headerlink" title="使用前提"></a>使用前提</h3><p>本文使用到的脚本适用于下图中的这种情况，WAN IP 与 LAN IP 都为无状态分配(stateless)，并且 pppoe 也在此路由器上进行，其他的路由配置情况没有测试，待测试后再来更新。</p><p><img src="https://uploader.shimo.im/f/4BR4laYLTwUwowJu.png!thumbnail" srcset="/img/loading.gif" alt="图片"></p><h3 id="路由器和下级设备的-DDNS"><a href="#路由器和下级设备的-DDNS" class="headerlink" title="路由器和下级设备的 DDNS"></a>路由器和下级设备的 DDNS</h3><p>脚本文件已经上传到了我的 GitHub， <a href="https://github.com/whatGUI/Padavan-DDNS-Solution" target="_blank" rel="noopener">可以点这里查看</a> 。注意！该脚本仅更新<code>临时地址</code>，不支持其他类型地址。</p><ol><li>首先通过 ssh 连接到路由器，然后执行以下命令来下载脚本到指定位置<pre><code>cd /etc/storagecurl -Lk &quot;https://raw.githubusercontent.com/whatGUI/Padavan-DDNS-Solution/master/dynv6.sh&quot; &gt; dynv6.sh</code></pre></li><li>写入 dynv6 账户信息：将下面命令中的<code>令牌</code>改为你注册 dynv6 得到的 token 信息，然后执行命令<pre><code>sed -i &quot;s/TOKEN/令牌/g&quot; dynv6.sh</code></pre></li><li>添加可执行权限，保存已有的计划任务<pre><code>chmod +x dynv6.shcrontab -l &gt; dynv6cron</code></pre></li><li>添加需要进行 DDNS 的设备，每 10 分钟自动执行一次检查。注意！把命令中的<code>域名</code>改为你的域名，比如 xxxx.dynv6.net，<code>设备名</code>自定但必须是英文否则会出错，<code>MAC 地址</code>要求按照带有冒号分隔符的格式，例如<code>xx:xx:xx:xx:xx:xx</code><br>```<br>#参数格式说明：./dynv6.sh [模式] [域名] [设备名] [MAC 地址]<br>cat &gt;&gt; dynv6cron &lt;&lt;EOF<br>#添加路由器的 DDNS</li></ol><p>*/10 * * * * /etc/storage/dynv6.sh router 域名<br>#添加下级设备的 DDNS<br>*/10 * * * * /etc/storage/dynv6.sh neigh 域名 设备名 MAC 地址</p><h1 id="……"><a href="#……" class="headerlink" title="……"></a>……</h1><p>EOF<br>#可以添加多个设备，每一行对应一个设备<br>#举例如下<br>#<em>/10 * * * * /etc/storage/dynv6.sh router xxx.dynv6.net<br>#</em>/10 * * * * /etc/storage/dynv6.sh neigh xxxx.dynv6.net phone 11:22:33:aa:bb:cc</p><pre><code>5. 启动计划任务</code></pre><p>crontab dynv6cron</p><pre><code>6. 在 Padavan 的后台管理页找到`高级设置`-&gt;`自定义设置`-&gt;`脚本`-&gt;`在 WAN 上行/下行启动后执行`中添加以下命令，就可以在重启路由后立即更新地址。</code></pre><p>#对于路由器<br>/etc/storage/dynv6.sh router 域名<br>#或者是下级设备<br>/etc/storage/dynv6.sh neigh 域名 设备名 MAC 地址</p><pre><code>## 使用邮件的方式获得当前 IPV6 地址在搜集相关问题时，看到了这篇 [《IPV6网络下建立安全的家庭服务器[NAS]》](https://zhuanlan.zhihu.com/p/75247811) ，其中&gt;在 ipv6 下，由于不再只分配一个 ip 地址，而是一下子给了你海量的 ipv6 地址，这就形成了天然的安全屏障。大家都知道，要尝试对某个家庭服务器发起攻击尝试，首要的条件就是知道对方的服务器地址。&gt;&gt;最大的安全是什么，你的服务器 ipv6 地址只有你自己知道，如果你不对家庭服务器捆绑 DDNS(动态域名)，那么有心人即使知道了你家宽带今天 ipv6 的 64 位前缀，为了尝试获得服务器的真实 ipv6 地址，它需要对 16 亿亿个 ipv6 地址进行扫描，再牛的黑客，没有几年的时间是无法完成的。而你的 ipv6 地址一般每 3 天更换一次前缀，意味着黑客必须在 3 天内完成 16 亿亿个有效扫描，这是无法完成的任务。&gt;而如果你捆绑了动态域名，这就好比直接打开了你家 ipv6 网络的一道门，任何人只要知道你的动态域名，根本不需要扫描，就可以直接知道你服务器的 ipv6 地址，然后进行攻击尝试。&gt;&gt;由于家庭服务器，一般只为有限的家庭成员提供服务，因此服务器地址只需要家人能够解析就可以，因此通过服务器端发送邮件，用户直接在软件里自动通过电子邮件进行解析的方式，可以极大的保护建立在动态 ipv6 地址上的家庭服务器不被泄漏。&gt;&gt;使用这种方式，黑客要获取服务器 ipv6 地址，就必须尝试获取邮件，而电子邮箱由于是需要用户名和口令才能登录，而破解大公司的邮箱服务器口令和用户名是非常非常的困难。也就是通过电子邮件解析服务器地址的方法，对比使用动态域名，多了一道由电子邮箱提供的安全防火门，让你家的服务器 ip 地址真正大隐隐于市了。总结一下就是，使用 DDNS 域名一旦泄露被公布在互联网上，受到精准攻击的风险就会上升，因此直接使用动态变化的 IP 会安全一些。当然这只是针对自家家用用途，如果要对外提供服务还得上 DDNS。（下级设备可以使用 DHCPv6 stateful 有状态分配 ip，不推荐 EUI64 地址）### 自动发送新的 IP 到指定邮箱1. 下载脚本</code></pre><p>cd /etc/storage<br>curl -Lk “<a href="https://raw.githubusercontent.com/whatGUI/Padavan-DDNS-Solution/master/mailuip.sh&quot;" target="_blank" rel="noopener">https://raw.githubusercontent.com/whatGUI/Padavan-DDNS-Solution/master/mailuip.sh&quot;</a> &gt; mailuip.sh</p><pre><code>2.  填写 SMTP 邮箱配置，把下面命令中的`SMTP 服务器地址``邮箱账号``邮箱密码``收件地址`，分别改为对应的项，然后执行命令</code></pre><p>sed -i “s/SERVER/SMTP 服务器地址/g” mailuip.sh<br>sed -i “s/ACCOUNT/邮箱账号/g” mailuip.sh<br>sed -i “s/PWD/邮箱密码/g” mailuip.sh<br>sed -i “s/TOWHO/收件地址/g” mailuip.sh</p><pre><code>举例如下：</code></pre><p>#例子<br>#sed -i “s/SERVER/smtp.163.com/g” mailuip.sh<br>#sed -i “s/ACCOUNT/666666@163.com/g” mailuip.sh<br>#sed -i “s/PWD/123456/g” mailuip.sh<br>#sed -i “s/TOWHO/666@qq.com,<a href="mailto:555@qq.com">555@qq.com</a>/g” mailuip.sh  #若有多个收件人用英文逗号分开</p><pre><code>3. 添加可执行权限，保存之前的计划任务</code></pre><p>chmod +x mailuip.sh<br>crontab -l &gt; mailcron</p><pre><code>4. 添加需要发送 ip 的设备，每 10 分钟自动执行一次检查。注意！`设备名`自定但必须是英文否则会出错，`MAC 地址`要求按照带有冒号分隔符的格式，例如`xx:xx:xx:xx:xx:xx`</code></pre><p>#参数格式说明：./mailuip.sh [模式] [设备名] [MAC 地址]<br>cat &gt;&gt; mailcron &lt;&lt;EOF<br>#添加路由器<br>*/10 * * * * /etc/storage/mailuip.sh router<br>#添加下级设备<br>#可以添加多个设备，每一行对应一个设备<br>*/10 * * * * /etc/storage/mailuip.sh neigh 设备名 MAC 地址</p><h1 id="……-1"><a href="#……-1" class="headerlink" title="……"></a>……</h1><p>EOF<br>#对于下级设备举例如下，注意空格不能丢<br>#<em>/10 * * * * /etc/storage/mailuip.sh neigh iphone 11:22:33:aa:bb:cc<br>#</em>/10 * * * * /etc/storage/mailuip.sh neigh mypc ee:ff:gg:11:22:33</p><pre><code>5. 启动计划任务</code></pre><p>crontab mailcron</p><pre><code>6. 在 Padavan 的后台管理页找到`高级设置`-&gt;`自定义设置`-&gt;`脚本`-&gt;`在 WAN 上行/下行启动后执行`中添加以下命令，就可以在重启路由后立即发送最新 IP 地址。</code></pre><p>#对于路由器<br>/etc/storage/mailuip.sh router<br>#或者是下级设备<br>/etc/storage/mailuip.sh neigh 设备名 MAC 地址</p><pre><code>## END如果有问题欢迎来 [GitHub](https://github.com/whatGUI/Padavan-DDNS-Solution) 提交你的 issue。## 记一下编辑脚本时遇到的问题在 windows 下的换行与 Linux 的换行不同，互不兼容，这就导致在 windows 记事本中编辑过的 shell 脚本，放在 Linux 下无法运行。最后处理方法是用 VS Code 打开，点击右下角`CRLF`，选择行尾序列，改为`LF`保存即可。## 参考家用宽带的 IPv6 配置： [https://lwz322.github.io/2019/07/25/IPv6_Home.html](https://lwz322.github.io/2019/07/25/IPv6_Home.html)V2EX › 宽带症候群 如何远程找到家里设备的 IPV6 地址？： [https://www.v2ex.com/t/592571](https://www.v2ex.com/t/592571)知乎-IPV6 网络下建立安全的家庭服务器[NAS]： [https://zhuanlan.zhihu.com/p/75247811](https://zhuanlan.zhihu.com/p/75247811)老毛子华硕 Padavan 外网 IP 变化自动发送邮件脚本 Padavan 添加 shell 脚本： [https://aisoa.cn/post-2506.html](https://aisoa.cn/post-2506.html) dynv6.com official update script: [https://gist.github.com/corny/7a07f5ac901844bd20c9](https://gist.github.com/corny/7a07f5ac901844bd20c9)</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>「捯饬记录」忘记导出Chrome书签该怎么办？</title>
    <link href="/2020/01/08/%E3%80%8C%E6%8D%AF%E9%A5%AC%E8%AE%B0%E5%BD%95%E3%80%8D%E5%BF%98%E8%AE%B0%E5%AF%BC%E5%87%BAChrome%E4%B9%A6%E7%AD%BE%E8%AF%A5%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/"/>
    <url>/2020/01/08/%E3%80%8C%E6%8D%AF%E9%A5%AC%E8%AE%B0%E5%BD%95%E3%80%8D%E5%BF%98%E8%AE%B0%E5%AF%BC%E5%87%BAChrome%E4%B9%A6%E7%AD%BE%E8%AF%A5%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="记录时间：2020-年-1-月-7-日"><a href="#记录时间：2020-年-1-月-7-日" class="headerlink" title="记录时间：2020 年 1 月 7 日"></a>记录时间：2020 年 1 月 7 日</h1><h2 id="关键词：chrome-书签-路径-备份-导出-切换系统-系统崩了"><a href="#关键词：chrome-书签-路径-备份-导出-切换系统-系统崩了" class="headerlink" title="关键词：chrome 书签 路径 备份 导出 切换系统 系统崩了"></a>关键词：chrome 书签 路径 备份 导出 切换系统 系统崩了</h2><p>新安装的 win10+Ubuntu 双系统，切换进 Ubuntu 之后发现没有备份 Chrome 的书签，无法导入，但是又不想重启的情况下该怎么办？</p><h2 id="导出书签"><a href="#导出书签" class="headerlink" title="导出书签"></a>导出书签</h2><p>假如 win10 安装在 C 盘，则直接找到 win10 系统下 Chrome 的个人资料文件夹，<code>C:\Users\[你的账户名]\AppData\Local\Google\Chrome\User Data\Default</code>，在里面找到一个名为<code>Bookmarks</code>的文件，这个就是书签，复制并保存好。</p><h2 id="使用-Bookmarks-文件恢复书签"><a href="#使用-Bookmarks-文件恢复书签" class="headerlink" title="使用 Bookmarks 文件恢复书签"></a>使用 Bookmarks 文件恢复书签</h2><p>很简单，直接复制到对应的个人资料文件夹即可，对于 Ubuntu 中的 Chrome 来说，其个人资料路径在<code>/home/[你的账户名]/.config/google-chrome/Default</code>。注意这里.config 文件夹是隐藏的，在文件管理器中按<code>Ctrl</code>+<code>H</code>即可显示隐藏文件。</p><h2 id="相似问题：系统崩溃后怎么导出书签？"><a href="#相似问题：系统崩溃后怎么导出书签？" class="headerlink" title="相似问题：系统崩溃后怎么导出书签？"></a>相似问题：系统崩溃后怎么导出书签？</h2><p>进不了系统可以找个 U 盘做一个 PE 系统（网上有很多教程），按路径进去手动提取 Bookmarks 文件即可，恢复也是直接复制到对应的个人资料文件夹就行。</p><h2 id="附上查看-Chrome-个人资料文件夹路径的方法"><a href="#附上查看-Chrome-个人资料文件夹路径的方法" class="headerlink" title="附上查看 Chrome 个人资料文件夹路径的方法"></a>附上查看 Chrome 个人资料文件夹路径的方法</h2><p>以防万一，可以在直接在浏览器地址栏输入<code>chrome://version/</code>，会显示路径信息的。</p><p>其实，登录账户使用云同步才是最方便的，如果登录 Chrome 不方便的话，那 Firefox 它不香么？</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>「捯饬记录」把 Ubuntu 19.10 装进移动硬盘</title>
    <link href="/2020/01/06/%E3%80%8C%E6%8D%AF%E9%A5%AC%E8%AE%B0%E5%BD%95%E3%80%8D%E6%8A%8A%20Ubuntu%2019.10%20%E8%A3%85%E8%BF%9B%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98/"/>
    <url>/2020/01/06/%E3%80%8C%E6%8D%AF%E9%A5%AC%E8%AE%B0%E5%BD%95%E3%80%8D%E6%8A%8A%20Ubuntu%2019.10%20%E8%A3%85%E8%BF%9B%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<h1 id="记录时间：2020-年-1-月-6-日"><a href="#记录时间：2020-年-1-月-6-日" class="headerlink" title="记录时间：2020 年 1 月 6 日"></a>记录时间：2020 年 1 月 6 日</h1><h2 id="关键词：Ubuntu-19-10-移动硬盘-Ubuntu安装-UEFI-GPT"><a href="#关键词：Ubuntu-19-10-移动硬盘-Ubuntu安装-UEFI-GPT" class="headerlink" title="关键词：Ubuntu 19.10 移动硬盘 Ubuntu安装 UEFI+GPT"></a>关键词：Ubuntu 19.10 移动硬盘 Ubuntu安装 UEFI+GPT</h2><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p><a href="https://whatgui.github.io/2019/12/31/%E3%80%8C%E6%8D%AF%E9%A5%AC%E8%AE%B0%E5%BD%95%E3%80%8D%E4%B8%80%E6%AC%A1Padavan%E5%9B%BA%E4%BB%B6%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9A%E5%88%B6%E8%BF%87%E7%A8%8B/" target="_blank" rel="noopener">定制编译Padavan固件</a> 必须要用到 Linux 环境，考虑到 win10 wsl 较弱的 io 性能以及虚拟机性能，最后还是选择在物理机上安装一个 Ubuntu。但是又不想把电脑仅剩的一点硬盘空间分割出来献给 Ubuntu，于是打起了移动硬盘的主意。</p><p>对于 win10，当你想要尝试通过 iso 直接安装到移动硬盘时只会得到：</p><blockquote><p>windows 无法安装到这个磁盘，安装程序不支持配置或安装通过 USB 或 IEEE1394 端口连接的磁盘</p></blockquote><p>这样的错误提示，因此只能借助 win to go 或者使用 VHD 的方法来安装。而对于 Ubuntu 好像没有这样的问题，可以直接安装。</p><h2 id="现场情况"><a href="#现场情况" class="headerlink" title="现场情况"></a>现场情况</h2><p>1 台 win10 笔记本电脑（内置一块 SSD），一块 500G 移动硬盘（HDD），一个 16G U 盘以及 Ubuntu19.10 的 iso 文件（从 <a href="https://ubuntu.com/download/desktop" target="_blank" rel="noopener">这里</a> 下载的）</p><h2 id="直接硬盘安装（失败）"><a href="#直接硬盘安装（失败）" class="headerlink" title="直接硬盘安装（失败）"></a>直接硬盘安装（失败）</h2><ol><li>确定电脑 bios 和移动硬盘为 UEFI+GPT 模式</li><li>给移动硬盘分出一个 3GB 的 FAT32 分区</li><li>把 iso 包含的安装文件复制进这个分区</li><li>重启，成功识别移动硬盘的安装文件并从中启动</li><li>安装，分区完成点击现在安装，弹出错误提示：卸载/cdrom 分区失败，点击继续</li><li>卡死在“正在探测文件系统…”</li></ol><p>经过反复试验了几次都不行，搜到的解决方法中</p><pre><code>sudo umount -l /isodevicesudo umount -l /cdrom</code></pre><p>都不起作用，而且手动卸载/cdrom 还会导致安装程序崩溃。<br><img src="https://uploader.shimo.im/f/R4MYfn9kmhc3oNrQ.jpg!thumbnail" srcset="/img/loading.gif" alt="图片"><br><img src="https://uploader.shimo.im/f/b8bHxKSFgG4Ad4Br.jpg!thumbnail" srcset="/img/loading.gif" alt="图片"><br>所以只能得到一个推测性的结论：Ubuntu19.10 不能支持安装文件与进行安装的分区在同一个磁盘，即硬盘安装的方法行不通。当然也不排除移动硬盘的兼容性问题，因为没有更多的设备来做测试。</p><h2 id="推荐常规安装方法（成功）"><a href="#推荐常规安装方法（成功）" class="headerlink" title="推荐常规安装方法（成功）"></a>推荐常规安装方法（成功）</h2><ol><li>确定电脑 bios 和移动硬盘分别为 UEFI+GPT 模式，空 U 盘格式化为 FAT32</li><li>在 win10 下，双击打开 Ubuntu 的 iso 文件，复制其中的所有文件到 U 盘</li><li>同时接上 U 盘与移动硬盘，重启，在 bios 启动选项中选择 U 盘</li><li>根据安装向导完成安装（在安装选项选择<code>其他选项</code>，手动分区）</li></ol><p>这里如果手头没有 U 盘，也可以在电脑硬盘上临时分出一个 FAT32 分区来充当安装 U 盘的角色，大小要能装下 Ubuntu 的安装文件（Ubuntu19.10 分配 3GB 空间足够了），然后在重启时选择该分区的 efi 启动即可。</p><p>另外，在安装分区时建议在移动硬盘上建立单独的<code>ESP分区</code>（EFI）存放启动信息，开机时使用 bios 来切换选择系统即可。也可以在 bios 中将移动硬盘的启动顺序设为第一位，这样可以做到插上移动硬盘开机自动进入 Ubuntu，拔掉硬盘开机自动进入原 win10 系统。</p><h2 id="关于-UEFI-安装"><a href="#关于-UEFI-安装" class="headerlink" title="关于 UEFI 安装"></a>关于 UEFI 安装</h2><p>UEFI 会主动搜索 FAT32 分区中的 efi 文件来确定启动项，所以利用这种特性来安装系统，简单快捷还不需要安装其他工具。但是受 FAT32 单个文件最大 4GB 的限制，对于 iso 文件接近 5GB 的 win10 来说这个方法就不适用了，这种情况更加推荐 win10 的官方工具或者 Rufus。（貌似也有小部分主板的 UEFI 能支持 NTFS）</p><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p>整个过程还被迫学会了一个强强操作：按住<code>Alt</code>+<code>PrintScreen</code> 再依次按 <code>r</code>、<code>e</code>、<code>i</code>、<code>s</code>、<code>u</code>、<code>b</code>，可以安全地强制 Ubuntu 系统重启。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>「捯饬记录」一次Padavan固件的简单定制过程</title>
    <link href="/2019/12/31/%E3%80%8C%E6%8D%AF%E9%A5%AC%E8%AE%B0%E5%BD%95%E3%80%8D%E4%B8%80%E6%AC%A1Padavan%E5%9B%BA%E4%BB%B6%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9A%E5%88%B6%E8%BF%87%E7%A8%8B/"/>
    <url>/2019/12/31/%E3%80%8C%E6%8D%AF%E9%A5%AC%E8%AE%B0%E5%BD%95%E3%80%8D%E4%B8%80%E6%AC%A1Padavan%E5%9B%BA%E4%BB%B6%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9A%E5%88%B6%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="记录时间：2019-年-12-月-31-日"><a href="#记录时间：2019-年-12-月-31-日" class="headerlink" title="记录时间：2019 年 12 月 31 日"></a>记录时间：2019 年 12 月 31 日</h1><h2 id="关键词：K2-Padavan-固件编译-定制"><a href="#关键词：K2-Padavan-固件编译-定制" class="headerlink" title="关键词：K2 Padavan 固件编译 定制"></a>关键词：K2 Padavan 固件编译 定制</h2><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>手里的 K2 一直以来使用的都是某恪的固件，确实稳定好用，但是直到现在都没有加入 IPV6 的相关功能。怀着想要体验 IPV6 的心情，一番折腾之后诞生了这一系列记录。那为什么不使用强大的 openwrt 呢？稳定性和无线性能是我首要考虑的问题，因此选择了捯饬 Padavan。最后几经搜索选择了 hanwckf 的开源固件，模板多教程也多，方便进行简单的定制。</p><h2 id="1-准备-Linux-系统环境"><a href="#1-准备-Linux-系统环境" class="headerlink" title="1. 准备 Linux 系统环境"></a>1. 准备 Linux 系统环境</h2><blockquote><p>根据 libgcc 的 <a href="https://www.jianshu.com/p/6b8403cdea46" target="_blank" rel="noopener">Padavan固件编译办法</a> ，推荐没有安装或者不想安装 Linux 系统的使用 Windows10 系统的 wsl 功能。</p></blockquote><p>首先安装了 Ubuntu 19.10，安装过程略显曲折，因为安装到了移动硬盘。关于这部分内容将在下一篇细说。</p><h3 id="1-1-更换国内源并更新了所有软件包，同时修改了-opt-目录权限为-777"><a href="#1-1-更换国内源并更新了所有软件包，同时修改了-opt-目录权限为-777" class="headerlink" title="1.1 更换国内源并更新了所有软件包，同时修改了/opt 目录权限为 777"></a>1.1 更换国内源并更新了所有软件包，同时修改了/opt 目录权限为 777</h3><pre><code>sudo sed -i &#39;s#http://archive.ubuntu.com#https://mirrors.huaweicloud.com#&#39; /etc/apt/sources.listsudo sed -i &#39;s#http://security.ubuntu.com#https://mirrors.huaweicloud.com#&#39; /etc/apt/sources.listsudo apt updatesudo apt upgradesudo chmod 777 /opt</code></pre><h3 id="1-2-安装必要的软件包"><a href="#1-2-安装必要的软件包" class="headerlink" title="1.2 安装必要的软件包"></a>1.2 安装必要的软件包</h3><pre><code>sudo apt updatesudo apt install unzip libtool-bin curl cmake gperf gawk flex bison nano xxd \cpio git python-docutils gettext automake autopoint texinfo build-essential help2man \pkg-config zlib1g-dev libgmp3-dev libmpc-dev libmpfr-dev libncurses5-dev libltdl-dev</code></pre><h3 id="1-3-下载源码到本地"><a href="#1-3-下载源码到本地" class="headerlink" title="1.3 下载源码到本地"></a>1.3 下载源码到本地</h3><pre><code>git clone --depth=1 https://gitee.com/hanwckf/rt-n56u.git /opt/rt-n56u</code></pre><p>这里没有用 GitHub，因为速度实在不给力。</p><h3 id="1-4-准备并编译工具链"><a href="#1-4-准备并编译工具链" class="headerlink" title="1.4 准备并编译工具链"></a>1.4 准备并编译工具链</h3><pre><code>cd /opt/rt-n56u/toolchain-mipsel./clean_toolchain./build_toolchain</code></pre><p>这一步使用的笔记本电脑，编译花了 30+min。如果工具链的源码没有变化，下一次编译固件不用再重新编译工具链，可以直接使用。</p><h2 id="2-修改配置文件进行简单的定制"><a href="#2-修改配置文件进行简单的定制" class="headerlink" title="2. 修改配置文件进行简单的定制"></a>2. 修改配置文件进行简单的定制</h2><p>为了修改文件更方便，先去下载了 <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VS Code</a> ，然后修改各配置文件。根据下表</p><table><thead><tr><th align="left">配置文件路径</th><th align="left">主要的可配置功能</th></tr></thead><tbody><tr><td align="left">/opt/rt-n56u/trunk/configs/templates/PSG1218.config</td><td align="left">包含软件包、功能</td></tr><tr><td align="left">/opt/rt-n56u/trunk/configs/boards/PSG1218/board.h</td><td align="left">指示灯、复位键等</td></tr><tr><td align="left">/opt/rt-n56u/trunk/configs/boards/PSG1218/kernel-3.4.x.config</td><td align="left">WAN、LAN、内存</td></tr><tr><td align="left">/opt/rt-n56u/trunk/user/shared/defaults.h</td><td align="left">路由器配置(默认网关、无线密码等)</td></tr></tbody></table><p>这次针对 K2 的定制过程修改的是 PSG1218_nano.config 和 defaults.h 这两个文件。主要是在/opt/rt-n56u/trunk/configs/templates/目录下发现了 PSG1218_nano.config 的配置模板文件，这个配置文件本身是 K2 的精简配置，出于对精简的谜之信仰选了这个。</p><h3 id="2-1-修改-PSG1218-nano-config"><a href="#2-1-修改-PSG1218-nano-config" class="headerlink" title="2.1 修改 PSG1218_nano.config"></a>2.1 修改 PSG1218_nano.config</h3><p>需要启用或关闭一个功能则将该行的末尾改为 y 或 n，至于功能是什么文件里有描述和注释</p><p>举个栗子：</p><pre><code>### Enable IPv6 support #是否启用 IPv6 支持CONFIG_FIRMWARE_ENABLE_IPV6=y #表示启用### Enable USB support  #是否启用 USB 支持CONFIG_FIRMWARE_ENABLE_USB=n #表示不启用（没有 usb 口）</code></pre><p>这次编译固件做出的修改如下</p><pre><code>CONFIG_FIRMWARE_INCLUDE_XUPNPD=n #去除用于 IPTV 的 XUPNPCONFIG_FIRMWARE_INCLUDE_DOGCOM=n #去除用于 Drcom 的工具CONFIG_FIRMWARE_INCLUDE_MINIEAP=n #去除可用于锐捷的 eap 客户端CONFIG_FIRMWARE_INCLUDE_NJIT_CLIENT=n #去除南工网络客户端CONFIG_FIRMWARE_INCLUDE_VLMCSD=n #去除用于 KMS 的工具</code></pre><h3 id="2-2-修改-defaults-h"><a href="#2-2-修改-defaults-h" class="headerlink" title="2.2 修改 defaults.h"></a>2.2 修改 defaults.h</h3><p>修改备用 NTP 服务器地址为 time.nist.gov</p><pre><code>#define DEF_NTP_SERVER1     &quot;time.nist.gov&quot;</code></pre><p>是的，编译完之后才发现这个更改没有任何意义，就是想找点什么改一下(￣▽￣)”<br>修改完毕，保存</p><h2 id="3-清理代码树并开始编译"><a href="#3-清理代码树并开始编译" class="headerlink" title="3. 清理代码树并开始编译"></a>3. 清理代码树并开始编译</h2><pre><code>cd /opt/rt-n56u/trunksudo ./clear_treesudo ./build_firmware_modify PSG1218_nano</code></pre><h2 id="4-编译完成保存固件"><a href="#4-编译完成保存固件" class="headerlink" title="4. 编译完成保存固件"></a>4. 编译完成保存固件</h2><p>固件编译耗时约为 10min，完成后的.trx 文件在/opt/rt-n56u/trunk/images 路径下找到，然后复制到其他地方保存，因为下次编译会覆盖。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2019/12/25/hello-world/"/>
    <url>/2019/12/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
