<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>「捯饬记录」一次Padavan固件的简单定制过程</title>
    <link href="/2019/12/31/%E3%80%8C%E6%8D%AF%E9%A5%AC%E8%AE%B0%E5%BD%95%E3%80%8D%E4%B8%80%E6%AC%A1Padavan%E5%9B%BA%E4%BB%B6%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9A%E5%88%B6%E8%BF%87%E7%A8%8B/"/>
    <url>/2019/12/31/%E3%80%8C%E6%8D%AF%E9%A5%AC%E8%AE%B0%E5%BD%95%E3%80%8D%E4%B8%80%E6%AC%A1Padavan%E5%9B%BA%E4%BB%B6%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9A%E5%88%B6%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="记录时间：2019年12月31日"><a href="#记录时间：2019年12月31日" class="headerlink" title="记录时间：2019年12月31日"></a>记录时间：2019年12月31日</h1><h2 id="关键词：K2-Padavan-老毛子-固件编译-定制"><a href="#关键词：K2-Padavan-老毛子-固件编译-定制" class="headerlink" title="关键词：K2 Padavan 老毛子 固件编译 定制"></a>关键词：K2 Padavan 老毛子 固件编译 定制</h2><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>手里的K2一直以来使用的都是某恪的固件，确实稳定好用，但是直到现在都没有加入IPV6的相关功能。怀着想要体验IPV6的心情，一番折腾之后诞生了这一系列记录。那为什么不使用强大的openwrt呢？稳定性和无线性能是我首要考虑的问题，因此选择了捯饬Padavan。最后几经搜索选择了hanwckf的开源固件，模板多教程也多，方便进行简单的定制。</p><ol><li>准备Linux系统环境<blockquote><p>根据libgcc的<a href="https://www.jianshu.com/p/6b8403cdea46" target="_blank" rel="noopener">Padavan固件编译办法</a>，推荐没有安装或者不想安装Linux系统的使用Windows10系统的wsl功能。</p></blockquote></li></ol><p>首先安装了Ubuntu 19.10，安装过程略显曲折，因为安装到了移动硬盘。关于这部分内容将在下一篇细说。</p><h3 id="1-1-更换国内源并更新了所有软件包，同时修改了-opt目录权限为777"><a href="#1-1-更换国内源并更新了所有软件包，同时修改了-opt目录权限为777" class="headerlink" title="1.1 更换国内源并更新了所有软件包，同时修改了/opt目录权限为777"></a>1.1 更换国内源并更新了所有软件包，同时修改了/opt目录权限为777</h3><pre><code>sudo sed -i &#39;s#http://archive.ubuntu.com#https://mirrors.huaweicloud.com#&#39; /etc/apt/sources.listsudo sed -i &#39;s#http://security.ubuntu.com#https://mirrors.huaweicloud.com#&#39; /etc/apt/sources.listsudo apt updatesudo apt upgradesudo chmod 777 /opt</code></pre><h3 id="1-2-安装必要的软件包"><a href="#1-2-安装必要的软件包" class="headerlink" title="1.2 安装必要的软件包"></a>1.2 安装必要的软件包</h3><pre><code>sudo apt updatesudo apt install unzip libtool-bin curl cmake gperf gawk flex bison nano xxd \cpio git python-docutils gettext automake autopoint texinfo build-essential help2man \pkg-config zlib1g-dev libgmp3-dev libmpc-dev libmpfr-dev libncurses5-dev libltdl-dev</code></pre><h3 id="1-3-下载源码到本地"><a href="#1-3-下载源码到本地" class="headerlink" title="1.3 下载源码到本地"></a>1.3 下载源码到本地</h3><pre><code>git clone --depth=1 https://gitee.com/hanwckf/rt-n56u.git /opt/rt-n56u</code></pre><p>这里没有用GitHub，因为速度实在不给力。</p><h3 id="1-4-准备并编译工具链"><a href="#1-4-准备并编译工具链" class="headerlink" title="1.4 准备并编译工具链"></a>1.4 准备并编译工具链</h3><pre><code>cd /opt/rt-n56u/toolchain-mipsel./clean_toolchain./build_toolchain</code></pre><p>这一步使用的笔记本电脑，编译花了30+min。如果工具链的源码没有变化，下一次编译固件不用再重新编译工具链，可以直接使用。</p><ol><li>修改配置文件进行简单的定制</li></ol><p>为了修改文件更方便，先去下载了<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VS Code</a>，然后修改各配置文件。根据下表</p><table><thead><tr><th align="left">配置文件路径</th><th align="left">主要的可配置功能</th></tr></thead><tbody><tr><td align="left">/opt/rt-n56u/trunk/configs/templates/PSG1218.config</td><td align="left">包含软件包、功能</td></tr><tr><td align="left">/opt/rt-n56u/trunk/configs/boards/PSG1218/board.h</td><td align="left">指示灯、复位键等</td></tr><tr><td align="left">/opt/rt-n56u/trunk/configs/boards/PSG1218/kernel-3.4.x.config</td><td align="left">WAN、LAN、内存</td></tr><tr><td align="left">/opt/rt-n56u/trunk/user/shared/defaults.h</td><td align="left">路由器配置(默认网关、无线密码等)</td></tr></tbody></table><p>这次针对K2的定制过程修改的是PSG1218_nano.config和defaults.h这两个文件。主要是在/opt/rt-n56u/trunk/configs/templates/目录下发现了PSG1218_nano.config的配置模板文件，这个配置文件本身是K2的精简配置，出于对精简的谜之信仰选了这个。</p><h3 id="2-1-修改PSG1218-nano-config"><a href="#2-1-修改PSG1218-nano-config" class="headerlink" title="2.1 修改PSG1218_nano.config"></a>2.1 修改PSG1218_nano.config</h3><p>需要启用或关闭一个功能则将该行的末尾改为y或n，至于功能是什么文件里有详细的描述注释</p><p>举个栗子：</p><pre><code>### Enable IPv6 support #是否启用IPv6支持CONFIG_FIRMWARE_ENABLE_IPV6=y #表示启用### Enable USB support  #是否启用USB支持CONFIG_FIRMWARE_ENABLE_USB=n #表示不启用（没有usb口）</code></pre><p>这次编译固件做出的修改如下</p><pre><code>CONFIG_FIRMWARE_INCLUDE_XUPNPD=n #去除用于IPTV的XUPNPCONFIG_FIRMWARE_INCLUDE_DOGCOM=n #去除用于Drcom的工具CONFIG_FIRMWARE_INCLUDE_MINIEAP=n #去除可用于锐捷的eap客户端CONFIG_FIRMWARE_INCLUDE_NJIT_CLIENT=n #去除南工网络客户端CONFIG_FIRMWARE_INCLUDE_VLMCSD=n #去除用于KMS的工具</code></pre><h3 id="2-2-修改defaults-h"><a href="#2-2-修改defaults-h" class="headerlink" title="2.2 修改defaults.h"></a>2.2 修改defaults.h</h3><p>修改备用NTP服务器地址为 time.nist.gov</p><pre><code>#define DEF_NTP_SERVER1     &quot;time.nist.gov&quot;</code></pre><p>修改完毕，保存</p><h2 id="3-清理代码树并开始编译"><a href="#3-清理代码树并开始编译" class="headerlink" title="3. 清理代码树并开始编译"></a>3. 清理代码树并开始编译</h2><pre><code>cd /opt/rt-n56u/trunksudo ./clear_treesudo ./build_firmware_modify PSG1218_nano</code></pre><ol><li>编译完成保存固件</li></ol><p>固件编译耗时约为10min，完成后的.trx文件在/opt/rt-n56u/trunk/images路径下找到，然后复制到其他地方保存，因为下次编译会覆盖。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2019/12/25/hello-world/"/>
    <url>/2019/12/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
